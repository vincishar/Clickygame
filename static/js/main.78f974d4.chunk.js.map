{"version":3,"sources":["components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","names","count","Tscore","storeTarget","handleClick","e","_this$state","_this","sort","Math","random","clickedItem","target","alt","find","item","push","setState","_this2","this","react_default","a","createElement","className","map","name","key","onClick","src","concat","Component","App","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAoEeA,6MAhEXC,MAAQ,CACJC,MAAO,CAAC,UAAW,SAAU,SAAU,QAAS,aAAc,eAAgB,WAAY,WAAY,aAAc,SAAU,WAAY,eAC1IC,MAAO,EACPC,OAAQ,EACRC,YAAa,MAGjBC,YAAc,SAAAC,GAAK,IAAAC,EAC2BC,EAAKR,MAA1CE,EADUK,EACVL,MAAOC,EADGI,EACHJ,OAAQF,EADLM,EACKN,MAAOG,EADZG,EACYH,YAE3BH,EAAQA,EAAMQ,KAAK,kBAAMC,KAAKC,SAAW,KAEzC,IAAIC,EAAcN,EAAEO,OAAOC,IAEvBN,EAAKR,MAAMI,YAAYW,KAAK,SAAAC,GAAI,OAAIA,IAASJ,KAC7CV,EAAQ,EACRE,EAAc,MAEdF,GAAS,GACGC,IACRA,GAAU,GAEdC,EAAYa,KAAKL,IAGrBJ,EAAKU,SAAS,CACVhB,QAAOC,SAAQF,QAAOG,yFAIrB,IAAAe,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,0BACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uCACJF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oBAAYH,KAAKpB,MAAME,MAAvB,iBAA4CkB,KAAKpB,MAAMG,OAAvD,SAIhBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sFAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UACKH,KAAKpB,MAAMC,MAAMwB,IAAI,SAAAC,GAClB,OACIL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,GACLL,EAAAC,EAAAC,cAAA,OAAKK,QAAST,EAAKd,YAAawB,IAAG,UAAAC,OAAYJ,EAAZ,QAAwBZ,IAAKY,EAAMF,UAAU,4BArDrGO,aCUJC,mLARX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAD,cAJUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78f974d4.chunk.js","sourcesContent":["import React, { Component } from \"react\"\n// import DC from \"images/dc.jpg\";\n\nclass Home extends Component {\n    state = {\n        names: ['aquaman', 'Batman', 'Cyborg', 'flash', 'greenarrow', 'greenlantern', 'hawkgirl', 'MMhunter', 'redtornado', 'shazam', 'Superman', 'wonderwoman'],\n        count: 0,\n        Tscore: 0,\n        storeTarget: []\n    };\n\n    handleClick = e => {\n        let {count, Tscore, names, storeTarget} = this.state;\n\n        names = names.sort(() => Math.random() - 0.5);\n\n        let clickedItem = e.target.alt;\n\n        if (this.state.storeTarget.find(item => item === clickedItem)) {\n            count = 0;\n            storeTarget = []\n        } else {\n            count += 1\n            if (count > Tscore) {\n                Tscore += 1;\n            }\n            storeTarget.push(clickedItem);\n        }\n                 \n        this.setState({\n            count, Tscore, names, storeTarget\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"navbar\">\n                    <nav>\n                        <ul>\n                            <li><h2>Clicky Game</h2></li>\n                            <li><h2>Click an Image to Begin!</h2></li>\n                            <li><h2>Score: {this.state.count} | Top score: {this.state.Tscore} </h2></li>\n                        </ul>\n                    </nav>\n                </div>\n                <div className=\"banner\">\n                    <h1>Clicky Game!</h1>\n                    <p>Click on an image to earn points, but don't click on any more than once!</p>\n                </div>\n                <div className=\"image\">\n                    <div className=\"imageWrapper\">\n                        <ul>\n                            {this.state.names.map(name => {\n                                return (\n                                    <li key={name}>\n                                        <img onClick={this.handleClick} src={`images/${name}.jpg`} alt={name} className=\"imageItem\" />\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Home from \"./components/home.jsx\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}